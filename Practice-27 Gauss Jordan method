import numpy as np
n = 3
# Make the numpy array of size n x n + 1 and initialize it to
# zero to store the array
a = np.zeros((n,n+1))
# Making a numpy array of size n and initializing
# to zero to store the solution vector
x = np.zeros(n) # --> x[n..]
# Reading the coefficients of the matrix remembering that
# each coefficient is determined within the system of equations as:
# x, y, z = c -> c = coefficient
print('Enter the coefficient for the matrix to resolve:')
for i in range(n):
    for j in range(n+1):
        a[i][j] = float(input('a['+str(i)+']['+ str(j)+']='))
# Applying the gauss-jordan method 
for i in range(n):
    if a[i][i] == 0.0:
        print('Error zero division detected!')        
    for j in range(n):
        if i != j:
            ratio = a[j][i]/a[i][i]
            for k in range(n+1):
                a[j][k] = a[j][k] - ratio * a[i][k]
# Result and printing of the solution
print('\nThe required solution is: ')
first_coef, second_coef, third_coef = True, False, False
for i in range(n):
    #Obtaining the solution and storing it into the matrix x [n ...]
    x[i] = a[i][n]/a[i][i]    
    if first_coef == True:
        print('X = ',(x[i]), end = '\t')
        first_coef = False
        second_coef = True        
    elif second_coef == True:
        print('Y = ',(x[i]), end = '\t')
        second_coef = False
        third_coef = True        
    elif third_coef == True:
        print('Z = ',(x[i]), end = '\t')      
